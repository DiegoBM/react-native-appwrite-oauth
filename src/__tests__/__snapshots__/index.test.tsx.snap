// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Re-renders upon a change in provider reflecting the right provider in the url. 1`] = `
<View
  style={
    Object {
      "alignItems": "stretch",
      "flex": 1,
      "margin": 0,
      "padding": 0,
    }
  }
>
  <Modal
    animationType="slide"
    hardwareAccelerated={false}
    visible={true}
  >
    <View>
      <View
        accessibilityRole="button"
        accessibilityState={Object {}}
        accessible={true}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
      >
        <View
          style={
            Array [
              Object {},
            ]
          }
        >
          <Text
            style={
              Array [
                Object {
                  "color": "#007AFF",
                  "fontSize": 18,
                  "margin": 8,
                  "textAlign": "center",
                },
              ]
            }
          >
            Cancel
          </Text>
        </View>
      </View>
    </View>
    <View
      style={
        Array [
          Object {
            "flex": 1,
            "overflow": "hidden",
          },
          undefined,
        ]
      }
    >
      <RNCWebView
        cacheEnabled={true}
        injectedJavaScriptBeforeContentLoadedForMainFrameOnly={true}
        injectedJavaScriptForMainFrameOnly={true}
        javaScriptEnabled={true}
        messagingEnabled={false}
        onContentProcessDidTerminate={[Function]}
        onHttpError={[Function]}
        onLoadingError={[Function]}
        onLoadingFinish={[Function]}
        onLoadingProgress={[Function]}
        onLoadingStart={[Function]}
        onMessage={[Function]}
        onShouldStartLoadWithRequest={[Function]}
        source={
          Object {
            "uri": "https://localhost/v1/account/sessions/oauth2/facebook?success=http%3A%2F%2Flocalhost%2Fauth%2Foauth2%2Fsuccess&failure=http%3A%2F%2Flocalhost%2Fauth%2Foauth2%2Ffailure&project=testproject",
          }
        }
        style={
          Array [
            Object {
              "flex": 1,
              "overflow": "hidden",
            },
            Object {
              "backgroundColor": "#ffffff",
            },
            Object {
              "alignItems": "stretch",
              "flex": 1,
              "margin": 0,
              "padding": 0,
            },
          ]
        }
        useSharedProcessPool={true}
      />
    </View>
  </Modal>
</View>
`;

exports[`Re-renders upon a change in provider reflecting the right provider in the url. 2`] = `
<View
  style={
    Object {
      "alignItems": "stretch",
      "flex": 1,
      "margin": 0,
      "padding": 0,
    }
  }
>
  <Modal
    animationType="slide"
    hardwareAccelerated={false}
    visible={true}
  >
    <View>
      <View
        accessibilityRole="button"
        accessibilityState={Object {}}
        accessible={true}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
      >
        <View
          style={
            Array [
              Object {},
            ]
          }
        >
          <Text
            style={
              Array [
                Object {
                  "color": "#007AFF",
                  "fontSize": 18,
                  "margin": 8,
                  "textAlign": "center",
                },
              ]
            }
          >
            Cancel
          </Text>
        </View>
      </View>
    </View>
    <View
      style={
        Array [
          Object {
            "flex": 1,
            "overflow": "hidden",
          },
          undefined,
        ]
      }
    >
      <RNCWebView
        cacheEnabled={true}
        injectedJavaScriptBeforeContentLoadedForMainFrameOnly={true}
        injectedJavaScriptForMainFrameOnly={true}
        javaScriptEnabled={true}
        messagingEnabled={false}
        onContentProcessDidTerminate={[Function]}
        onHttpError={[Function]}
        onLoadingError={[Function]}
        onLoadingFinish={[Function]}
        onLoadingProgress={[Function]}
        onLoadingStart={[Function]}
        onMessage={[Function]}
        onShouldStartLoadWithRequest={[Function]}
        source={
          Object {
            "uri": "https://localhost/v1/account/sessions/oauth2/github?success=http%3A%2F%2Flocalhost%2Fauth%2Foauth2%2Fsuccess&failure=http%3A%2F%2Flocalhost%2Fauth%2Foauth2%2Ffailure&project=testproject",
          }
        }
        style={
          Array [
            Object {
              "flex": 1,
              "overflow": "hidden",
            },
            Object {
              "backgroundColor": "#ffffff",
            },
            Object {
              "alignItems": "stretch",
              "flex": 1,
              "margin": 0,
              "padding": 0,
            },
          ]
        }
        useSharedProcessPool={true}
      />
    </View>
  </Modal>
</View>
`;

exports[`Re-renders upon a change in scopes reflecting the right scopes in the url. 1`] = `
<View
  style={
    Object {
      "alignItems": "stretch",
      "flex": 1,
      "margin": 0,
      "padding": 0,
    }
  }
>
  <Modal
    animationType="slide"
    hardwareAccelerated={false}
    visible={true}
  >
    <View>
      <View
        accessibilityRole="button"
        accessibilityState={Object {}}
        accessible={true}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
      >
        <View
          style={
            Array [
              Object {},
            ]
          }
        >
          <Text
            style={
              Array [
                Object {
                  "color": "#007AFF",
                  "fontSize": 18,
                  "margin": 8,
                  "textAlign": "center",
                },
              ]
            }
          >
            Cancel
          </Text>
        </View>
      </View>
    </View>
    <View
      style={
        Array [
          Object {
            "flex": 1,
            "overflow": "hidden",
          },
          undefined,
        ]
      }
    >
      <RNCWebView
        cacheEnabled={true}
        injectedJavaScriptBeforeContentLoadedForMainFrameOnly={true}
        injectedJavaScriptForMainFrameOnly={true}
        javaScriptEnabled={true}
        messagingEnabled={false}
        onContentProcessDidTerminate={[Function]}
        onHttpError={[Function]}
        onLoadingError={[Function]}
        onLoadingFinish={[Function]}
        onLoadingProgress={[Function]}
        onLoadingStart={[Function]}
        onMessage={[Function]}
        onShouldStartLoadWithRequest={[Function]}
        source={
          Object {
            "uri": "https://localhost/v1/account/sessions/oauth2/facebook?success=http%3A%2F%2Flocalhost%2Fauth%2Foauth2%2Fsuccess&failure=http%3A%2F%2Flocalhost%2Fauth%2Foauth2%2Ffailure&project=testproject",
          }
        }
        style={
          Array [
            Object {
              "flex": 1,
              "overflow": "hidden",
            },
            Object {
              "backgroundColor": "#ffffff",
            },
            Object {
              "alignItems": "stretch",
              "flex": 1,
              "margin": 0,
              "padding": 0,
            },
          ]
        }
        useSharedProcessPool={true}
      />
    </View>
  </Modal>
</View>
`;

exports[`Re-renders upon a change in scopes reflecting the right scopes in the url. 2`] = `
<View
  style={
    Object {
      "alignItems": "stretch",
      "flex": 1,
      "margin": 0,
      "padding": 0,
    }
  }
>
  <Modal
    animationType="slide"
    hardwareAccelerated={false}
    visible={true}
  >
    <View>
      <View
        accessibilityRole="button"
        accessibilityState={Object {}}
        accessible={true}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
      >
        <View
          style={
            Array [
              Object {},
            ]
          }
        >
          <Text
            style={
              Array [
                Object {
                  "color": "#007AFF",
                  "fontSize": 18,
                  "margin": 8,
                  "textAlign": "center",
                },
              ]
            }
          >
            Cancel
          </Text>
        </View>
      </View>
    </View>
    <View
      style={
        Array [
          Object {
            "flex": 1,
            "overflow": "hidden",
          },
          undefined,
        ]
      }
    >
      <RNCWebView
        cacheEnabled={true}
        injectedJavaScriptBeforeContentLoadedForMainFrameOnly={true}
        injectedJavaScriptForMainFrameOnly={true}
        javaScriptEnabled={true}
        messagingEnabled={false}
        onContentProcessDidTerminate={[Function]}
        onHttpError={[Function]}
        onLoadingError={[Function]}
        onLoadingFinish={[Function]}
        onLoadingProgress={[Function]}
        onLoadingStart={[Function]}
        onMessage={[Function]}
        onShouldStartLoadWithRequest={[Function]}
        source={
          Object {
            "uri": "https://localhost/v1/account/sessions/oauth2/github?success=http%3A%2F%2Flocalhost%2Fauth%2Foauth2%2Fsuccess&failure=http%3A%2F%2Flocalhost%2Fauth%2Foauth2%2Ffailure&scopes%5B0%5D=user%3Aemail&project=testproject",
          }
        }
        style={
          Array [
            Object {
              "flex": 1,
              "overflow": "hidden",
            },
            Object {
              "backgroundColor": "#ffffff",
            },
            Object {
              "alignItems": "stretch",
              "flex": 1,
              "margin": 0,
              "padding": 0,
            },
          ]
        }
        useSharedProcessPool={true}
      />
    </View>
  </Modal>
</View>
`;

exports[`Renders an user-defined header instead of the standard one if one is passed. 1`] = `
<View
  style={
    Object {
      "alignItems": "stretch",
      "flex": 1,
      "margin": 0,
      "padding": 0,
    }
  }
>
  <Modal
    animationType="slide"
    hardwareAccelerated={false}
    visible={true}
  >
    <Text>
      Test Header
    </Text>
    <View
      style={
        Array [
          Object {
            "flex": 1,
            "overflow": "hidden",
          },
          undefined,
        ]
      }
    >
      <RNCWebView
        cacheEnabled={true}
        injectedJavaScriptBeforeContentLoadedForMainFrameOnly={true}
        injectedJavaScriptForMainFrameOnly={true}
        javaScriptEnabled={true}
        messagingEnabled={false}
        onContentProcessDidTerminate={[Function]}
        onHttpError={[Function]}
        onLoadingError={[Function]}
        onLoadingFinish={[Function]}
        onLoadingProgress={[Function]}
        onLoadingStart={[Function]}
        onMessage={[Function]}
        onShouldStartLoadWithRequest={[Function]}
        source={
          Object {
            "uri": "https://localhost/v1/account/sessions/oauth2/facebook?success=http%3A%2F%2Flocalhost%2Fauth%2Foauth2%2Fsuccess&failure=http%3A%2F%2Flocalhost%2Fauth%2Foauth2%2Ffailure&project=testproject",
          }
        }
        style={
          Array [
            Object {
              "flex": 1,
              "overflow": "hidden",
            },
            Object {
              "backgroundColor": "#ffffff",
            },
            Object {
              "alignItems": "stretch",
              "flex": 1,
              "margin": 0,
              "padding": 0,
            },
          ]
        }
        useSharedProcessPool={true}
      />
    </View>
  </Modal>
</View>
`;

exports[`Renders correctly. 1`] = `
<View
  style={
    Object {
      "alignItems": "stretch",
      "flex": 1,
      "margin": 0,
      "padding": 0,
    }
  }
>
  <Modal
    animationType="slide"
    hardwareAccelerated={false}
    visible={false}
  >
    <View>
      <View
        accessibilityRole="button"
        accessibilityState={Object {}}
        accessible={true}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
      >
        <View
          style={
            Array [
              Object {},
            ]
          }
        >
          <Text
            style={
              Array [
                Object {
                  "color": "#007AFF",
                  "fontSize": 18,
                  "margin": 8,
                  "textAlign": "center",
                },
              ]
            }
          >
            Cancel
          </Text>
        </View>
      </View>
    </View>
  </Modal>
</View>
`;

exports[`Renders the WebView once it starts authenticating. 1`] = `
<View
  style={
    Object {
      "alignItems": "stretch",
      "flex": 1,
      "margin": 0,
      "padding": 0,
    }
  }
>
  <Modal
    animationType="slide"
    hardwareAccelerated={false}
    visible={false}
  >
    <View>
      <View
        accessibilityRole="button"
        accessibilityState={Object {}}
        accessible={true}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
      >
        <View
          style={
            Array [
              Object {},
            ]
          }
        >
          <Text
            style={
              Array [
                Object {
                  "color": "#007AFF",
                  "fontSize": 18,
                  "margin": 8,
                  "textAlign": "center",
                },
              ]
            }
          >
            Cancel
          </Text>
        </View>
      </View>
    </View>
  </Modal>
</View>
`;

exports[`Renders the WebView once it starts authenticating. 2`] = `
<View
  style={
    Object {
      "alignItems": "stretch",
      "flex": 1,
      "margin": 0,
      "padding": 0,
    }
  }
>
  <Modal
    animationType="slide"
    hardwareAccelerated={false}
    visible={true}
  >
    <View>
      <View
        accessibilityRole="button"
        accessibilityState={Object {}}
        accessible={true}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
      >
        <View
          style={
            Array [
              Object {},
            ]
          }
        >
          <Text
            style={
              Array [
                Object {
                  "color": "#007AFF",
                  "fontSize": 18,
                  "margin": 8,
                  "textAlign": "center",
                },
              ]
            }
          >
            Cancel
          </Text>
        </View>
      </View>
    </View>
    <View
      style={
        Array [
          Object {
            "flex": 1,
            "overflow": "hidden",
          },
          undefined,
        ]
      }
    >
      <RNCWebView
        cacheEnabled={true}
        injectedJavaScriptBeforeContentLoadedForMainFrameOnly={true}
        injectedJavaScriptForMainFrameOnly={true}
        javaScriptEnabled={true}
        messagingEnabled={false}
        onContentProcessDidTerminate={[Function]}
        onHttpError={[Function]}
        onLoadingError={[Function]}
        onLoadingFinish={[Function]}
        onLoadingProgress={[Function]}
        onLoadingStart={[Function]}
        onMessage={[Function]}
        onShouldStartLoadWithRequest={[Function]}
        source={
          Object {
            "uri": "https://localhost/v1/account/sessions/oauth2/testprovider?success=http%3A%2F%2Flocalhost%2Fauth%2Foauth2%2Fsuccess&failure=http%3A%2F%2Flocalhost%2Fauth%2Foauth2%2Ffailure&project=testproject",
          }
        }
        style={
          Array [
            Object {
              "flex": 1,
              "overflow": "hidden",
            },
            Object {
              "backgroundColor": "#ffffff",
            },
            Object {
              "alignItems": "stretch",
              "flex": 1,
              "margin": 0,
              "padding": 0,
            },
          ]
        }
        useSharedProcessPool={true}
      />
    </View>
  </Modal>
</View>
`;
