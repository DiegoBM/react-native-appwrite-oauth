// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Allows to change the color of the loading wheel. 1`] = `
<Modal
  animationType="slide"
  hardwareAccelerated={false}
  visible={true}
>
  <View
    accessibilityRole="button"
    accessibilityState={Object {}}
    accessible={true}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
  >
    <View
      style={
        Array [
          Object {},
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "color": "#007AFF",
              "fontSize": 18,
              "margin": 8,
              "textAlign": "center",
            },
          ]
        }
      >
        Cancel
      </Text>
    </View>
  </View>
  <View
    style={
      Array [
        Object {
          "flex": 1,
          "overflow": "hidden",
        },
        undefined,
      ]
    }
  >
    <RNCWebView
      cacheEnabled={true}
      injectedJavaScriptBeforeContentLoadedForMainFrameOnly={true}
      injectedJavaScriptForMainFrameOnly={true}
      javaScriptEnabled={true}
      messagingEnabled={false}
      onContentProcessDidTerminate={[Function]}
      onError={[Function]}
      onHttpError={[Function]}
      onLoadingError={[Function]}
      onLoadingFinish={[Function]}
      onLoadingProgress={[Function]}
      onLoadingStart={[Function]}
      onMessage={[Function]}
      onShouldStartLoadWithRequest={[Function]}
      source={
        Object {
          "uri": "https://localhost/v1/account/sessions/oauth2/testprovider?success=http%3A%2F%2Flocalhost%2Fauth%2Foauth2%2Fsuccess&failure=http%3A%2F%2Flocalhost%2Fauth%2Foauth2%2Ffailure&project=testproject",
        }
      }
      style={
        Array [
          Object {
            "flex": 1,
            "overflow": "hidden",
          },
          Object {
            "backgroundColor": "#ffffff",
          },
          Array [
            Object {
              "alignItems": "stretch",
              "flex": 1,
              "margin": 0,
              "padding": 0,
            },
            Object {},
          ],
        ]
      }
      useSharedProcessPool={true}
    />
  </View>
  <View
    style={
      Object {
        "alignItems": "center",
        "bottom": 0,
        "justifyContent": "center",
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  >
    <ActivityIndicator
      animating={true}
      color="rgb(0, 0, 0)"
      hidesWhenStopped={true}
      size="large"
    />
  </View>
</Modal>
`;

exports[`Re-renders upon a change in provider reflecting the right provider in the url. 1`] = `
<Modal
  animationType="slide"
  hardwareAccelerated={false}
  visible={true}
>
  <View
    accessibilityRole="button"
    accessibilityState={Object {}}
    accessible={true}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
  >
    <View
      style={
        Array [
          Object {},
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "color": "#007AFF",
              "fontSize": 18,
              "margin": 8,
              "textAlign": "center",
            },
          ]
        }
      >
        Cancel
      </Text>
    </View>
  </View>
  <View
    style={
      Array [
        Object {
          "flex": 1,
          "overflow": "hidden",
        },
        undefined,
      ]
    }
  >
    <RNCWebView
      cacheEnabled={true}
      injectedJavaScriptBeforeContentLoadedForMainFrameOnly={true}
      injectedJavaScriptForMainFrameOnly={true}
      javaScriptEnabled={true}
      messagingEnabled={false}
      onContentProcessDidTerminate={[Function]}
      onError={[Function]}
      onHttpError={[Function]}
      onLoadingError={[Function]}
      onLoadingFinish={[Function]}
      onLoadingProgress={[Function]}
      onLoadingStart={[Function]}
      onMessage={[Function]}
      onShouldStartLoadWithRequest={[Function]}
      source={
        Object {
          "uri": "https://localhost/v1/account/sessions/oauth2/facebook?success=http%3A%2F%2Flocalhost%2Fauth%2Foauth2%2Fsuccess&failure=http%3A%2F%2Flocalhost%2Fauth%2Foauth2%2Ffailure&project=testproject",
        }
      }
      style={
        Array [
          Object {
            "flex": 1,
            "overflow": "hidden",
          },
          Object {
            "backgroundColor": "#ffffff",
          },
          Array [
            Object {
              "alignItems": "stretch",
              "flex": 1,
              "margin": 0,
              "padding": 0,
            },
            Object {},
          ],
        ]
      }
      useSharedProcessPool={true}
    />
  </View>
  <View
    style={
      Object {
        "alignItems": "center",
        "bottom": 0,
        "justifyContent": "center",
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  >
    <ActivityIndicator
      animating={true}
      color="#206fce"
      hidesWhenStopped={true}
      size="large"
    />
  </View>
</Modal>
`;

exports[`Re-renders upon a change in provider reflecting the right provider in the url. 2`] = `
<Modal
  animationType="slide"
  hardwareAccelerated={false}
  visible={true}
>
  <View
    accessibilityRole="button"
    accessibilityState={Object {}}
    accessible={true}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
  >
    <View
      style={
        Array [
          Object {},
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "color": "#007AFF",
              "fontSize": 18,
              "margin": 8,
              "textAlign": "center",
            },
          ]
        }
      >
        Cancel
      </Text>
    </View>
  </View>
  <View
    style={
      Array [
        Object {
          "flex": 1,
          "overflow": "hidden",
        },
        undefined,
      ]
    }
  >
    <RNCWebView
      cacheEnabled={true}
      injectedJavaScriptBeforeContentLoadedForMainFrameOnly={true}
      injectedJavaScriptForMainFrameOnly={true}
      javaScriptEnabled={true}
      messagingEnabled={false}
      onContentProcessDidTerminate={[Function]}
      onError={[Function]}
      onHttpError={[Function]}
      onLoadingError={[Function]}
      onLoadingFinish={[Function]}
      onLoadingProgress={[Function]}
      onLoadingStart={[Function]}
      onMessage={[Function]}
      onShouldStartLoadWithRequest={[Function]}
      source={
        Object {
          "uri": "https://localhost/v1/account/sessions/oauth2/github?success=http%3A%2F%2Flocalhost%2Fauth%2Foauth2%2Fsuccess&failure=http%3A%2F%2Flocalhost%2Fauth%2Foauth2%2Ffailure&project=testproject",
        }
      }
      style={
        Array [
          Object {
            "flex": 1,
            "overflow": "hidden",
          },
          Object {
            "backgroundColor": "#ffffff",
          },
          Array [
            Object {
              "alignItems": "stretch",
              "flex": 1,
              "margin": 0,
              "padding": 0,
            },
            Object {},
          ],
        ]
      }
      useSharedProcessPool={true}
    />
  </View>
  <View
    style={
      Object {
        "alignItems": "center",
        "bottom": 0,
        "justifyContent": "center",
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  >
    <ActivityIndicator
      animating={true}
      color="#206fce"
      hidesWhenStopped={true}
      size="large"
    />
  </View>
</Modal>
`;

exports[`Re-renders upon a change in scopes reflecting the right scopes in the url. 1`] = `
<Modal
  animationType="slide"
  hardwareAccelerated={false}
  visible={true}
>
  <View
    accessibilityRole="button"
    accessibilityState={Object {}}
    accessible={true}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
  >
    <View
      style={
        Array [
          Object {},
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "color": "#007AFF",
              "fontSize": 18,
              "margin": 8,
              "textAlign": "center",
            },
          ]
        }
      >
        Cancel
      </Text>
    </View>
  </View>
  <View
    style={
      Array [
        Object {
          "flex": 1,
          "overflow": "hidden",
        },
        undefined,
      ]
    }
  >
    <RNCWebView
      cacheEnabled={true}
      injectedJavaScriptBeforeContentLoadedForMainFrameOnly={true}
      injectedJavaScriptForMainFrameOnly={true}
      javaScriptEnabled={true}
      messagingEnabled={false}
      onContentProcessDidTerminate={[Function]}
      onError={[Function]}
      onHttpError={[Function]}
      onLoadingError={[Function]}
      onLoadingFinish={[Function]}
      onLoadingProgress={[Function]}
      onLoadingStart={[Function]}
      onMessage={[Function]}
      onShouldStartLoadWithRequest={[Function]}
      source={
        Object {
          "uri": "https://localhost/v1/account/sessions/oauth2/facebook?success=http%3A%2F%2Flocalhost%2Fauth%2Foauth2%2Fsuccess&failure=http%3A%2F%2Flocalhost%2Fauth%2Foauth2%2Ffailure&project=testproject",
        }
      }
      style={
        Array [
          Object {
            "flex": 1,
            "overflow": "hidden",
          },
          Object {
            "backgroundColor": "#ffffff",
          },
          Array [
            Object {
              "alignItems": "stretch",
              "flex": 1,
              "margin": 0,
              "padding": 0,
            },
            Object {},
          ],
        ]
      }
      useSharedProcessPool={true}
    />
  </View>
  <View
    style={
      Object {
        "alignItems": "center",
        "bottom": 0,
        "justifyContent": "center",
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  >
    <ActivityIndicator
      animating={true}
      color="#206fce"
      hidesWhenStopped={true}
      size="large"
    />
  </View>
</Modal>
`;

exports[`Re-renders upon a change in scopes reflecting the right scopes in the url. 2`] = `
<Modal
  animationType="slide"
  hardwareAccelerated={false}
  visible={true}
>
  <View
    accessibilityRole="button"
    accessibilityState={Object {}}
    accessible={true}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
  >
    <View
      style={
        Array [
          Object {},
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "color": "#007AFF",
              "fontSize": 18,
              "margin": 8,
              "textAlign": "center",
            },
          ]
        }
      >
        Cancel
      </Text>
    </View>
  </View>
  <View
    style={
      Array [
        Object {
          "flex": 1,
          "overflow": "hidden",
        },
        undefined,
      ]
    }
  >
    <RNCWebView
      cacheEnabled={true}
      injectedJavaScriptBeforeContentLoadedForMainFrameOnly={true}
      injectedJavaScriptForMainFrameOnly={true}
      javaScriptEnabled={true}
      messagingEnabled={false}
      onContentProcessDidTerminate={[Function]}
      onError={[Function]}
      onHttpError={[Function]}
      onLoadingError={[Function]}
      onLoadingFinish={[Function]}
      onLoadingProgress={[Function]}
      onLoadingStart={[Function]}
      onMessage={[Function]}
      onShouldStartLoadWithRequest={[Function]}
      source={
        Object {
          "uri": "https://localhost/v1/account/sessions/oauth2/github?success=http%3A%2F%2Flocalhost%2Fauth%2Foauth2%2Fsuccess&failure=http%3A%2F%2Flocalhost%2Fauth%2Foauth2%2Ffailure&scopes%5B0%5D=user%3Aemail&project=testproject",
        }
      }
      style={
        Array [
          Object {
            "flex": 1,
            "overflow": "hidden",
          },
          Object {
            "backgroundColor": "#ffffff",
          },
          Array [
            Object {
              "alignItems": "stretch",
              "flex": 1,
              "margin": 0,
              "padding": 0,
            },
            Object {},
          ],
        ]
      }
      useSharedProcessPool={true}
    />
  </View>
  <View
    style={
      Object {
        "alignItems": "center",
        "bottom": 0,
        "justifyContent": "center",
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  >
    <ActivityIndicator
      animating={true}
      color="#206fce"
      hidesWhenStopped={true}
      size="large"
    />
  </View>
</Modal>
`;

exports[`Renders an user-defined layout instead of the standard one if one is passed. 1`] = `
<Modal
  animationType="slide"
  hardwareAccelerated={false}
  visible={true}
>
  <View
    data-testId="test-webview"
  >
    <View
      style={
        Array [
          Object {
            "flex": 1,
            "overflow": "hidden",
          },
          undefined,
        ]
      }
    >
      <RNCWebView
        cacheEnabled={true}
        injectedJavaScriptBeforeContentLoadedForMainFrameOnly={true}
        injectedJavaScriptForMainFrameOnly={true}
        javaScriptEnabled={true}
        messagingEnabled={false}
        onContentProcessDidTerminate={[Function]}
        onError={[Function]}
        onHttpError={[Function]}
        onLoadingError={[Function]}
        onLoadingFinish={[Function]}
        onLoadingProgress={[Function]}
        onLoadingStart={[Function]}
        onMessage={[Function]}
        onShouldStartLoadWithRequest={[Function]}
        source={
          Object {
            "uri": "https://localhost/v1/account/sessions/oauth2/facebook?success=http%3A%2F%2Flocalhost%2Fauth%2Foauth2%2Fsuccess&failure=http%3A%2F%2Flocalhost%2Fauth%2Foauth2%2Ffailure&project=testproject",
          }
        }
        style={
          Array [
            Object {
              "flex": 1,
              "overflow": "hidden",
            },
            Object {
              "backgroundColor": "#ffffff",
            },
            Array [
              Object {
                "alignItems": "stretch",
                "flex": 1,
                "margin": 0,
                "padding": 0,
              },
              Object {},
            ],
          ]
        }
        useSharedProcessPool={true}
      />
    </View>
  </View>
  <View
    style={
      Object {
        "alignItems": "center",
        "bottom": 0,
        "justifyContent": "center",
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  >
    <ActivityIndicator
      animating={true}
      color="#206fce"
      hidesWhenStopped={true}
      size="large"
    />
  </View>
</Modal>
`;

exports[`Renders correctly. 1`] = `
<Modal
  animationType="slide"
  hardwareAccelerated={false}
  visible={false}
>
  <View
    accessibilityRole="button"
    accessibilityState={Object {}}
    accessible={true}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
  >
    <View
      style={
        Array [
          Object {},
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "color": "#007AFF",
              "fontSize": 18,
              "margin": 8,
              "textAlign": "center",
            },
          ]
        }
      >
        Cancel
      </Text>
    </View>
  </View>
</Modal>
`;

exports[`Renders the WebView and a loading wheel once it starts authenticating. 1`] = `
<Modal
  animationType="slide"
  hardwareAccelerated={false}
  visible={false}
>
  <View
    accessibilityRole="button"
    accessibilityState={Object {}}
    accessible={true}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
  >
    <View
      style={
        Array [
          Object {},
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "color": "#007AFF",
              "fontSize": 18,
              "margin": 8,
              "textAlign": "center",
            },
          ]
        }
      >
        Cancel
      </Text>
    </View>
  </View>
</Modal>
`;

exports[`Renders the WebView and a loading wheel once it starts authenticating. 2`] = `
<Modal
  animationType="slide"
  hardwareAccelerated={false}
  visible={true}
>
  <View
    accessibilityRole="button"
    accessibilityState={Object {}}
    accessible={true}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
  >
    <View
      style={
        Array [
          Object {},
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "color": "#007AFF",
              "fontSize": 18,
              "margin": 8,
              "textAlign": "center",
            },
          ]
        }
      >
        Cancel
      </Text>
    </View>
  </View>
  <View
    style={
      Array [
        Object {
          "flex": 1,
          "overflow": "hidden",
        },
        undefined,
      ]
    }
  >
    <RNCWebView
      cacheEnabled={true}
      injectedJavaScriptBeforeContentLoadedForMainFrameOnly={true}
      injectedJavaScriptForMainFrameOnly={true}
      javaScriptEnabled={true}
      messagingEnabled={false}
      onContentProcessDidTerminate={[Function]}
      onError={[Function]}
      onHttpError={[Function]}
      onLoadingError={[Function]}
      onLoadingFinish={[Function]}
      onLoadingProgress={[Function]}
      onLoadingStart={[Function]}
      onMessage={[Function]}
      onShouldStartLoadWithRequest={[Function]}
      source={
        Object {
          "uri": "https://localhost/v1/account/sessions/oauth2/testprovider?success=http%3A%2F%2Flocalhost%2Fauth%2Foauth2%2Fsuccess&failure=http%3A%2F%2Flocalhost%2Fauth%2Foauth2%2Ffailure&project=testproject",
        }
      }
      style={
        Array [
          Object {
            "flex": 1,
            "overflow": "hidden",
          },
          Object {
            "backgroundColor": "#ffffff",
          },
          Array [
            Object {
              "alignItems": "stretch",
              "flex": 1,
              "margin": 0,
              "padding": 0,
            },
            Object {},
          ],
        ]
      }
      useSharedProcessPool={true}
    />
  </View>
  <View
    style={
      Object {
        "alignItems": "center",
        "bottom": 0,
        "justifyContent": "center",
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  >
    <ActivityIndicator
      animating={true}
      color="#206fce"
      hidesWhenStopped={true}
      size="large"
    />
  </View>
</Modal>
`;
